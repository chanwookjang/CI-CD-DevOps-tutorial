name: Deploy to EKS  # 워크플로우 이름
on: 
  push:
    branches: [ main ] 
     # main 브랜치에 push 이벤트 발생 시 트리거

jobs:
  deploy:
    runs-on: ubuntu-latest  # GitHub 호스팅 Ubuntu 실행 환경
    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4  # 저장소 코드를 워크플로우에 복제
        # run: |
        #   echo "Checkout code"

      # 2. AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # GitHub Secrets에 저장된 값
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  #  리전
        # run: |
        #   echo "Configuring AWS credentials"
  

      # 3. ECR 로그인
      - name: Login to ECR
        run: |
          aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_REGISTRY
          echo "Login to ECR"
        env:
          ECR_REGISTRY: 267269535421.dkr.ecr.us-east-1.amazonaws.com  # 본인 계정 ID로 변경 필요
          ## ECR 레지스트리 URL은 AWS ECR 콘솔에서 확인 가능하며 레포지터리는 andy1692/app로 푸시할 때 추가로 설정
          ## 레지스트리 >> 레포지터리 
      # 4. 도커 이미지 빌드 및 푸시
      - name: Build and push Docker image
        run: | ## ECR에 푸시할 도커 이미지 빌드 및 푸시
          docker compose -f docker_compose.yaml build --no-cache  
          docker tag django-app:latest $ECR_REGISTRY/andy1692/app:latest
          docker push $ECR_REGISTRY/andy1692/app:latest  
          echo "Build and push Docker image to ECR"
        env:
          ECR_REGISTRY: 267269535421.dkr.ecr.us-east-1.amazonaws.com

      # 5. 테라폼 인프라 배포
      - name: Terraform Apply
        run: |
          cd terraform  # terraform 디렉토리 이동
          terraform init  # 테라폼 초기화
          terraform apply -auto-approve  # 자동 승인 모드로 인프라 배포
          echo "Terraform apply completed"
        